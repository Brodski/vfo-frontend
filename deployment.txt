SSH

$ ssh brodski@35.223.37.170 -i .\moreKeyz
 (pass b------------------------0)

-----------------------------------------------------------------

DEPLOYMENT (Http server, mongoDB, and backend server)
	
  Overview
  
- install git  
- git clone repos
- install node
- install mongodb
- install maven 
- install java
- configure basic networking


DEPLOYMENT (Debian 9)

  "Script"
  

$ sudo apt-get install default-jdk -y
$ sudo apt-get install maven -y
$ sudo apt-get install git -y
$ sudo apt-get install nodejs -y
$ sudo curl -sL https://deb.nodesource.com/setup_12.x | sudo bash -
$ sudo apt-get install -y nodejs
$ sudo apt-get install -y build-essential

$ git clone https://github.com/Brodski/customyoutube-frontend.git
$ git clone https://github.com/Brodski/customyoutube-backend.git

(MongoDB instructions can be found on their website, but they are here below)

$ wget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add -
$ echo "deb http://repo.mongodb.org/apt/debian stretch/mongodb-org/4.2 main" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.list
$ sudo apt-get update
   19 sudo apt remove --autoremove mongodb-org
   20  sudo rm /etc/apt/sources.list.d/mongodb*.list
   21  sudo apt update
   22  sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 4B7C549A058F8B6B
   23  echo "deb [arch=amd64] http://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.2 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.list
   24  sudo apt update
   25  sudo apt install mongodb-org
   26  sudo service mongod start
$ sudo service mongod start


- In the Cloud provier (AWS, GCP) need to open port 8080 to enable client to server communication
- open port 8443 too
- In springboot, need to config @CORS w/ domain of website  
- In Google Console, go to the API & Services section then configure the Client info & OAuth2 with domain of website   

----------------------------------------------------------
Certificates
 
  Creating
    $ sudo certbot certonly --standalone
      (enter customyoutube.com videofeedorganizer.com)
    After completing, you'll need the keystore for Spring boot
    $ cd /home/cbrodski/restApi/src/main/resources
    $ sudo openssl pkcs12 -export -in /etc/letsencrypt/live/customyoutube.com/fullchain.pem -inkey /etc/letsencrypt/live/customyoutube.com/privkey.pem -out keystore.p12 -name tomcat  -CAfile /etc/letsencrypt/live/customyoutube.com/chain.pem -caname root
    :)

  Renew
    $ ps aux | grep node
    $ sudo kill -9 x
    $ sudo certbot certonly -d videofeedorganizer.com
    $ sudo nohup npm run deploy &

NODEJS
  Commands that creates certificats https://certbot.eff.org/lets-encrypt/debianstretch-other , recommened by google https://domains.google/tld/security/
  How to create an HTTPS server in Node.js? - https://stackoverflow.com/a/21809393/12654472
  Setup an HTTPS server with NodeJS and Express - https://youtu.be/8ptiZlO7ROs?t=170
  https://hackernoon.com/set-up-ssl-in-nodejs-and-express-using-openssl-f2529eab5bb
  https://nodejs.org/en/knowledge/HTTP/servers/how-to-create-a-HTTPS-server/
  Deploy Node.js app with Digital Ocean (Free SSL certificate with Certbot) - https://youtu.be/lN0oiYqenpA?t=875
SPRINGBOOT
  How to use cert from certbot in springboot app https://dzone.com/articles/spring-boot-secured-by-lets-encrypt

** Make sure your cloud provider accepts https traffic **

$ sudo apt-get install certbot -y 
$ Do commands found at link and use "myCoolNodeServer.js" as reference.
   https://certbot.eff.org/lets-encrypt/debianstretch-other

$ sudo openssl pkcs12 -export -in /etc/letsencrypt/live/customyoutube.com/fullchain.pem  /
  -inkey /etc/letsencrypt/live/customyoutube.com/privkey.pem -out keystore.p12 -name tomcat  /
  -CAfile /etc/letsencrypt/live/customyoutube.com/chain.pem -caname root

Copying java-keystore To Local 
  $ sudo chmod 777 keystore.p12.new
  $ (on local) scp -i ..\restApi\moreKeyz brodski@35.223.37.170:/home/cbrodski/keystore.p12.new .


$ cd src/main/resources/
$ sudo openssl pkcs12 -export -in /etc/letsencrypt/live/videofeedorganizer.com/fullchain.pem -inkey /etc/letsencrypt/live/videofeedorganizer.com/privkey.pem -out keystore.p12 -name tomcat  -CAfile /etc/letsencrypt/live/videofeedorganizer.com/chain.pem -caname root
-------------------------------------------------------------------

Permissions
$ sudo chown -R $(whoami) ~/.npm
$ sudo npm install -g --unsafe-perm node-sass

Restarting/Starting (to be improved)
  (TODO PM2 for node production)

$ ps aux | grep java
$ ps aux | grep node
$ sudo kill -9 xxxxx

Start http server
$ cd /home/cbrodski/client-restApi
$ sudo chown -R $USER /home/cbrodski/customyoutube-frontend/node_modules
$ sudo git pull
$ sudo npm install
$ sudo npm run build
$ sudo nohup npm run deploy &

Start backend server  
(make sure file "application.properties" has "spring.profiles.active=prod")
$ cd to backend
$ sudo mvn package && sudo nohup java -jar target/restApi-0.0.1-SNAPSHOT.jar -Dprofiles.active=prod &
## wihtout outputfile of nohub
#  $ nohup nohup java -jar target/restApi-0.0.1-SNAPSHOT.jar -Dprofiles.active=prod  > /dev/null 2>&1 & 

spingboot ssl:
1. renew certs - https://dzone.com/articles/spring-boot-secured-by-lets-encrypt
  $ certbot renew 
  # (this nextline is outdated and does not work)
  $ openssl pkcs12 -export -in /etc/letsencrypt/live/videofeedorganizer.com/fullchain.pem 
                 -inkey /etc/letsencrypt/live/videofeedorganizer.com/privkey.pem 
                 -out /home/cbrodski/restApi/src/main/resources/keystore.p12 
                 -name tomcat 
                 -CAfile /etc/letsencrypt/live/videofeedorganizer.com/chain.pem 
                 -passout pass:password
  # "Certificates and private keys are generated [by certbot]"
  # !!! "Spring-Boot does not support PEM files generated by Letâ€™s Encrypt."
  # !!! "Spring Boot supports PKCS12 extension." 
  # !!! " Using OpenSSL, we convert our certificate and private key to PKCS12."


  - NEW
  $ sudo openssl pkcs12 -export -in /etc/letsencrypt/live/vfo.one/fullchain.pem -inkey  /etc/letsencrypt/live/vfo.one/privkey.pem -out /home/thebears1234321/customyoutube-backend/src/main/resources/keystore.p12  -name tomcat -CAfile /etc/letsencrypt/live/vfo.one/chain.pem -passout pass:password
  - NEWER 
  $ sudo openssl pkcs12 -export -in /etc/letsencrypt/live/vfo.one/fullchain.pem -inkey  /etc/letsencrypt/live/vfo.one/privkey.pem -out /home/cbrodski/customyoutube-backend/src/main/resources/keystore.p12  -name tomcat -CAfile /etc/letsencrypt/live/vfo.one/chain.pem -passout pass:password
